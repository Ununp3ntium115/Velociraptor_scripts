#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Deploy Malware incident response package

.DESCRIPTION
    Automated deployment script for Malware incident response incident response package.
    This script deploys Velociraptor with pre-configured artifacts and tools for this specific
    incident response scenario.

.PARAMETER InstallDir
    Installation directory for Velociraptor (default: C:\Program Files\Velociraptor)

.PARAMETER Offline
    Enable offline mode deployment

.PARAMETER Force
    Force installation even if Velociraptor is already installed

.EXAMPLE
    .\Deploy-Malware.ps1 -InstallDir "C:\Velociraptor" -Offline
#>

[CmdletBinding()]
param(
    [string]$InstallDir = "C:\Program Files\Velociraptor",
    [switch]$Offline,
    [switch]$Force
)

Write-Host "Deploying Malware incident response package" -ForegroundColor Green
Write-Host "Installation Directory: $InstallDir" -ForegroundColor Cyan
Write-Host "Configuration: config\Malware-config.yaml" -ForegroundColor Cyan
Write-Host "Offline Mode: $Offline" -ForegroundColor Cyan

try {
    # Import Velociraptor Setup Scripts if available
    $moduleFound = $false
    if (Test-Path ".\VelociraptorSetupScripts.psd1") {
        try {
            Import-Module ".\VelociraptorSetupScripts.psd1" -Force -ErrorAction Stop
            $moduleFound = $true
            Write-Host "Velociraptor Setup Scripts loaded successfully!" -ForegroundColor Green
        } catch {
            Write-Host "Could not load VelociraptorSetupScripts module: $($_.Exception.Message)" -ForegroundColor Yellow
        }
    }

    # Check if configuration file exists
    $configFile = "config\Malware-config.yaml"
    if (-not (Test-Path $configFile)) {
        Write-Host "WARNING: Configuration file not found: $configFile" -ForegroundColor Yellow
        Write-Host "Using default deployment..." -ForegroundColor Yellow
    }

    # Create installation directory
    if (-not (Test-Path $InstallDir)) {
        New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
        Write-Host "Created installation directory: $InstallDir" -ForegroundColor Green
    }

    # Copy artifacts
    if (Test-Path "artifacts") {
        $artifactDest = Join-Path $InstallDir "artifacts"
        if (-not (Test-Path $artifactDest)) {
            New-Item -ItemType Directory -Path $artifactDest -Force | Out-Null
        }
        Copy-Item "artifacts\*" -Destination $artifactDest -Recurse -Force
        Write-Host "Copied artifacts to: $artifactDest" -ForegroundColor Green
    }

    # Copy tools if available
    if (Test-Path "tools") {
        $toolsDest = Join-Path $InstallDir "tools"
        if (-not (Test-Path $toolsDest)) {
            New-Item -ItemType Directory -Path $toolsDest -Force | Out-Null
        }
        Copy-Item "tools\*" -Destination $toolsDest -Recurse -Force
        Write-Host "Copied tools to: $toolsDest" -ForegroundColor Green
    }

    # Copy configuration
    if (Test-Path $configFile) {
        $configDest = Join-Path $InstallDir "config"
        if (-not (Test-Path $configDest)) {
            New-Item -ItemType Directory -Path $configDest -Force | Out-Null
        }
        Copy-Item $configFile -Destination $configDest -Force
        Write-Host "Copied configuration to: $configDest" -ForegroundColor Green
    }

    # Try to use module functions if available
    if ($moduleFound) {
        try {
            # Try to call Velociraptor deployment functions
            if (Get-Command "Deploy-VelociraptorStandalone" -ErrorAction SilentlyContinue) {
                Deploy-VelociraptorStandalone -InstallDir $InstallDir -Force:$Force
            } elseif (Get-Command "Deploy-Velociraptor" -ErrorAction SilentlyContinue) {
                Deploy-Velociraptor -InstallDir $InstallDir -Force:$Force
            } else {
                Write-Host "No deployment functions found in module" -ForegroundColor Yellow
                Write-Host "Manual deployment required" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "Module deployment failed: $($_.Exception.Message)" -ForegroundColor Yellow
            Write-Host "Continuing with manual deployment..." -ForegroundColor Yellow
        }
    }

    Write-Host "Malware incident response package deployment completed!" -ForegroundColor Green
    Write-Host "Next steps:" -ForegroundColor Cyan
    Write-Host "1. Start Velociraptor server" -ForegroundColor White
    Write-Host "2. Deploy collectors to target systems" -ForegroundColor White
    Write-Host "3. Monitor artifact collection" -ForegroundColor White

} catch {
    Write-Host "Deployment failed: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
